import random
import string
from api import *
from login import *
from main import main
from edit import *

from faker import Faker

fake = Faker()
# NOTE this is a arary of the positions, this si predefined as to avoid incorrect placement of a position that doesnt exist.
positions = ["manager", "chef", "kitchen hand", "food packers", "cleaners"]
# NOTE this is a arary of the positions, this si predefined as to avoid incorrect placement of a position that doesnt exist.
connection = connect()
# NOTE This function makes a personalised username for the employee, its a process of taking half of thier first name and adding 3 random integers.
def userName():
    for i in range(0, 5):
        userName = str(
            register_firstName[i]
            + str(random.randint(0, 999))
            + str(random.randint(0, 999))
            + str(random.randint(0, 999))
        )
    return userName


# NOTE this function creates a secure password since its totally randomised.
def password():
    # Random string with the combination of lower and upper case
    letters = string.ascii_letters
    result_str = (
        "".join(random.choice(letters) for i in range(3))
        + str(random.randint(0, 3))
        + str(random.randint(0, 999))
        + str(random.randint(0, 999))
    )
    return result_str


# NOTE this function calculates the wage, it uses factors such as age and assigned position value to calculate their wage as to make it fair for the employees to be payed what they deserve
def calculateWage():
    payingFactor = 20
    workingTime = 9
    age = register_age
    positionValue = 10
    position = list(register_position)
    for Positions in positions:
        for i in range(0, len(Positions)):
            if register_position == positions[0]:
                positionValue += 25
            elif register_position == positions[1]:
                positionValue += 29
            elif register_position == positions[2]:
                positionValue += 18
            elif register_position == positions[3]:
                positionValue += 15
            elif register_position == positions[4]:
                positionValue += 26
    wage = int(age * payingFactor / workingTime + positionValue)
    return wage


def weeklyPay():
    payingFactor = 20
    workingTime = 9
    age = register_age
    positionValue = 10
    position = list(register_position)
    for Positions in positions:
        for i in range(0, len(Positions)):
            if register_position == positions[0]:
                positionValue += 25
            elif register_position == positions[1]:
                positionValue += 29
            elif register_position == positions[2]:
                positionValue += 18
            elif register_position == positions[3]:
                positionValue += 15
            elif register_position == positions[4]:
                positionValue += 26
    wage = int(age * payingFactor / workingTime + positionValue) * 5
    return wage


def delete():
    employees = list(connection.execute("SELECT firstName FROM workers"))
    position = list(connection.execute("SELECT position FROM workers"))
    wage = list(connection.execute("SELECT wage FROM workers"))
    employeeID = list(connection.execute("SELECT employeeID FROM workers"))
    for i in range(0, len(employees)):
        print(employeeID[i] + ":" + employees[i] + ":" + position[i] + ":" + wage[i])
    employeeToDel = int(input("Which employee would you like to delete? :"))
    connection.execute("DELETE ? FROM workers"), (employees[employeeToDel])


def arrivalTime():
    global late_factor
    late_factor = int(random.randint(0, 50))
    arrivalTime = register_start + (f".{late_factor}")
    return arrivalTime


# NOTE  Function that writes the given data to the admin to the database.
# NOTE it collects the infomation from the admin and the manager and writes that data to the database and appropriate tables


def edit():
    global register_firstName, register_lastName, register_position, register_age, register_position, register_start

    # NOTE  The admin enters the required data provided by the managers and the rest are hidden from the admin

    register_firstName = input("enter Employee's First Name:")
    register_lastName = input("enter Employee's Last Name:")
    register_email = input("Enter Employee's email:")

    # NOTE the creation of the username and password are autogenerated
    register_userName = userName()
    register_password = password()
    register_age = int(input("Enter Employee's age:"))
    register_position = input("Enter the assigned Employee's position:")
    register_start = input(
        "when does he/she start thier shift please write @ following with thier time:"
    )
    register_end = input(
        "when does he/she end thier shift please write @ following with thier time:"
    )
    register_spw = input("how many shifts per week does the employee have:")

    if register_position not in positions:
        print("this position is not valid")
        register_position = input("Enter the assigned Employee's position:")
    register_Wage = calculateWage()

    # NOTE asks the admin if they would like to register another user. Both times it commits all the data before continuing.

    registerNother = input(
        "would you like to register another worker? | type: 'yes' or 'no' :"
    )

    if registerNother == "yes":

        # NOTE this writes the inital data.

        connection.execute(
            "INSERT OR REPLACE INTO employee_personal (firstName,lastName,email,userName,Age,Wage,position)VALUES (?,?,?,?,?,?,?,?)",
            (
                register_firstName,
                register_lastName,
                register_email,
                register_userName,
                register_age,
                register_Wage,
                register_position,
            ),
        )
        connection.commit()
        connection.execute(
            "INSERT OR REPLACE INTO application_infomation (Username,password,email)VALUES (?,?,?,?)",
            (userID, username, password, register_email),
        )

        # NOTE  this retrives the userid and plants it everywhere where its needed

        cur = connection.cursor()
        cur.execute("SELECT UserID FROM employee_personal")
        userID = cur.lastrowid
        last = len(userID) - 1
        print(userID[last])
        print("userID")

        connection.execute(
            "INSERT OR REPLACE INTO employee_pay (UserID,Username,lastName,weeklyPay,wage,age)VALUES (?,?,?,?,?,?)",
            (
                userID,
                username,
                register_lastName,
                weeklyPay(),
                calculateWage(),
                register_age,
            ),
        )
        connection.commit()
        connection.execute(
            "INSERT OR REPLACE INTO employee_shifts (UserID,Positions,startingTime,endingTime,shiftsPerWeek) VALUES (?,?,?,?,?)",
            (userID, register_position, register_start, register_end, register_spw),
        )
        connection.commit()
        connection.execute(
            "INSERT OR REPLACE INTO late_arrivals (UserID,employeeName,startingTime,arrivalTime,lateBy,lateAmt) VALUES (?,?,?,?,?)",
            (
                userID,
                register_firstName,
                register_start,
                arrivalTime(),
                late_factor,
                random.randint(0, 15),
            ),
        )
        connection.commit()
        number = fake.phone_number()
        connection.execute(
            "INSERT OR REPLACE INTO emergency_contact (UserID,Email,phoneNo)VALUES (?,?,?,)",
            (userID, register_email, number),
        )
        connection.commit()
        connection.execute(
            "INSERT OR REPLACE INTO normal_contact (UserID,Email,adress)VALUES (?,??,)",
            (userID, register_email, faker.address()),
        )
        connection.commit()
        edit()

    if registerNother == "no":
        connection.execute(
            "INSERT OR REPLACE INTO employee_personal (firstName,lastName,email,userName,Age,position)VALUES (?,?,?,?,?,?)",
            (
                register_firstName,
                register_lastName,
                register_email,
                register_userName,
                register_age,
                register_position,
            ),
        )
        connection.commit()

        cur = connection.cursor()
        cur.execute("SELECT UserID FROM 'employee_personal'")
        userID = cur.fetchall()
        last = len(userID) - 1
        userID = "".join(str(userID[last]))
        print(userID)

        connection.execute(
            """
            INSERT OR REPLACE INTO application_infomation (UserID,Username,password,email)
            VALUES (?,?,?,?)
            """,
            (userID, userName(), password(), register_email),
        )
        connection.commit()
        connection.execute(
            """
            INSERT OR REPLACE INTO employee_pay (UserID,Username,weeklyPay,wage,age)
            VALUES (?,?,?,?,?)
            """,
            (userID, userName(), weeklyPay(), calculateWage(), register_age),
        )
        connection.commit()
        connection.execute(
            """
            INSERT OR REPLACE INTO employee_shifts (UserID,Positions,startingTime,endingTime,shiftsPerWeek)
            VALUES (?,?,?,?,?)
            """,
            (userID, register_position, register_start, register_end, register_spw),
        )
        connection.commit()
        connection.execute(
            """
            INSERT OR REPLACE INTO late_arrivals (UserID,employeeName,startingTime,arrivalTime,lateBy,lateAmt)
            VALUES (?,?,?,?,?,?)
            """,
            (
                userID,
                register_firstName,
                register_start,
                arrivalTime(),
                late_factor,
                random.randint(0, 15),
            ),
        )
        connection.commit()
        number = fake.phone_number()
        adress = fake.address()
        connection.execute(
            "INSERT OR REPLACE INTO emergency_contact (UserID,Email,phoneNo) VALUES (?,?,?)",
            (userID, register_email, number),
        )
        connection.commit()
        connection.execute(
            """
            INSERT OR REPLACE INTO normal_contact (UserID,Email,adress)
            VALUES (?,?,?)
            """,
            (userID, register_email, adress),
        )
        connection.commit()
        connection.close()

    # NOTE  once the admin finishes entering the required infomation, the application asks the admin if they would like to log out.
    again = input("would you like to logout? :")
    if again == "yes":
        # NOTE the main function starts the login process
        main()
    elif again == "no":
        # NOTE restarts the employee resgistration process
        beginAdmin()


# NOTE this function is called to initalise the session with admin privileges
def beginAdmin():
    regOrDel = input("would you like to edit or delete a employee:")
    if regOrDel == "edit":
        edit()
    if regOrDel == "delete":
        delete()
